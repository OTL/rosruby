{"name":"rosruby","body":"ROS Ruby Client: rosruby\r\n=======\r\n[ROS](http://ros.org) is Robot Operating System developed by [Willow Garage](http://www.willowgarage.com/) and open source communities.\r\n\r\nThis project supports ruby ROS client. You can program robots by ruby, very easily.\r\n\r\n# API Reference\r\n- [rosruby API (trunk)](rosruby/doc)\r\n\r\nLet's start\r\n---------------\r\nInstall ROS and ruby first. ROS document is [http://ros.org/wiki/ROS/Installation](http://ros.org/wiki/ROS/Installation) .\r\n\r\nYou can install ruby by apt.\r\n\r\n```bash\r\n$ sudo apt-get install ruby rake\r\n```\r\n\r\nDownload rosruby into your ROS_PACKAGE_PATH.\r\n\r\n````bash\r\n$ git clone git://github.com/OTL/rosruby.git\r\n```\r\n\r\nplease add RUBYLIB environment variable, like below (if you are using bash).\r\n\r\n```bash\r\n$ echo \"export RUBYLIB=`rospack find rosruby`/lib\" >> ~/.bashrc\r\n$ source ~/.bashrc\r\n```\r\n\r\nTo use with precompiled electric release\r\n-----------------------\r\nIf you are using precompiled ROS distro, use the msg/srv generation script\r\n(gen_for_precompiled.py)\r\nIf you are using ROS from source, it requires just recompile the msg/srv\r\npackages by rosmake rosruby.\r\n\r\n```bash\r\n$ rosrun rosruby gen_for_precompiled.py\r\n```\r\n\r\nThis converts msg/srv to .rb which is needed by sample programs.\r\nIf you want to make other packages, add package names for args.\r\n\r\nFor example,\r\n\r\n```bash\r\n$ rosrun rosruby gen_for_precompiled.py geometry_msgs nav_msgs\r\n```\r\n\r\nThis script generates *.rb files under $HOME/.ros/rosruby directory.\r\nWhen you update message generator, it may be good idea to remove that directory.\r\n\r\nSample Source\r\n--------------\r\n### Subscriber\r\n\r\n```ruby\r\n#!/usr/bin/env ruby\r\n\r\nrequire 'ros'\r\nrequire 'std_msgs/String'\r\n\r\nnode = ROS::Node.new('/rosruby/sample_subscriber')\r\nnode.subscribe('/chatter', Std_msgs::String) do |msg|\r\n  puts \"message come! = \\'#{msg.data}\\'\"\r\nend\r\n\r\nwhile node.ok?\r\n  node.spin_once\r\n  sleep(1)\r\nend\r\n\r\n```\r\n\r\n### Publisher\r\n\r\n```ruby\r\n#!/usr/bin/env ruby\r\n\r\nrequire 'ros'\r\nrequire 'std_msgs/String'\r\n\r\nnode = ROS::Node.new('/rosruby/sample_publisher')\r\npublisher = node.advertise('/chatter', Std_msgs::String)\r\n\r\nmsg = Std_msgs::String.new\r\n\r\ni = 0\r\nwhile node.ok?\r\n  msg.data = \"Hello, rosruby!: #{i}\"\r\n  publisher.publish(msg)\r\n  sleep(1.0)\r\n  i += 1\r\nend\r\n```\r\n\r\nNote\r\n----------------\r\nRuby requires 'Start with Capital letter' for class or module names.\r\nSo please use **S**td_msgs::String class instead of **s**td_msgs::String.\r\n\r\nTry Publish and Subscribe\r\n----------------------\r\nYou needs three terminal as it is often for ROS users.\r\nThen you run roscore if is not running.\r\n\r\n```bash\r\n$ roscore\r\n```\r\n\r\nrun publisher sample\r\n\r\n```bash\r\n$ rosrun rosruby sample_publisher.rb\r\n```\r\n\r\nrun subscription sample\r\n\r\n```bash\r\n$ rosrun rosruby sample_subscriber.rb\r\n```\r\n\r\nyou can check publication by using rostopic.\r\n\r\n```bash\r\n$ rostopic list\r\n$ rostopic echo /chatter\r\n```\r\n\r\n\r\nTry Service?\r\n----------------------\r\n\r\n```bash\r\n$ rosrun rosruby add_two_ints_server.rb\r\n```\r\n\r\nrun client with args ('a' and 'b' for roscpp_tutorials/TwoInts)\r\n\r\n```bash\r\n$ rosrun rosruby add_two_ints_client.rb 10 20\r\n```\r\n\r\n\r\ndo all tests\r\n-------------------------\r\nrun roscore if is not running.\r\n\r\n```bash\r\n$ roscore\r\n```\r\n\r\nand run the unit tests.\r\n\r\n```bash\r\n$ rosrun rosruby run-test.rb\r\n```\r\n\r\nor\r\n\r\n```bash\r\n$ roscd rosruby\r\n$ rake test\r\n","tagline":"yet another rosruby","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}